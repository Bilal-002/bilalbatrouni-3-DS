package list;
import java.util.linkidlist;
import java.util.Arrays;

/**
 *
 * @author Bilal
 */
public class ArrayList implements List {

    private Object[] list;
    private int effectiveSize;
    private int BUFFER_SIZE = 10;

    public ArrayList() {
        list = new Object[BUFFER_SIZE];
        effectiveSize = 0;
    }

   
    public void add(Object newElement) {
        if (list.length == effectiveSize) {
            list = Arrays.copyOf(list, list.length + BUFFER_SIZE);
        }
        list[effectiveSize] = newElement;
        effectiveSize++;
    }

 
    public int size() {
        return effectiveSize;
    }

    
    public Object get(int index) {
        if (index < 0 || index >= effectiveSize) {
            throw new ArrayIndexOutOfBoundsException("Invlaid Index " + index);
        }
        return list[index];
    }

    
    public Object remove(int index) {
        if (index < 0 || index >= effectiveSize) {
            throw new ArrayIndexOutOfBoundsException("Invlaid Index " + index);
        }
        final Object valueToRemove = list[index];

        // 1- Keep all the elements from 0 to index-1 from list in place
        // 2- copy all the elements from index+1 to effectiveSize-1 from list[i] to list[i-1]
        // 3- effectiveSize--
        for (int i = index + 1; i < effectiveSize; i++) {
            list[i - 1] = list[i];
        }
        effectiveSize--;

        // 4- if the effectiveSize is divisible by BUFFER_SIZE
        //      create a new array with a size smaller by BUFFER_SIZE
        //      Copy the old array to the new one
        //      replace the "list" attribute by the new array
        if (effectiveSize % BUFFER_SIZE == 0) {
            list = Arrays.copyOf(list, list.length - BUFFER_SIZE);
        }

        return valueToRemove;
    }

   
    public boolean remove(Object element) {
        final int indexOfElementToRemove = indexOf(element);
        if (indexOfElementToRemove == -1) {
            return false;
        }
        remove(indexOfElementToRemove);
        return true;
    }

    
    public int indexOf(Object element) {
        for (int i = 0; i < list.length; i++) {
            if (list[i].equals(element)) {
                return i;
            }
        }
        return -1;
    }
class LinkedList { 
    Node head; // list head 
      //node - linkedlist
    class Node { 
        int data; 
        Node next; 
    
        Node(int d) { data = d; }  //constructor to create a new node
    } 
}
class Main {
    public static void main(String[] args) {
        // Create a LinkedList and initialize it
        LinkedList&lt;String&gt; colorList = new LinkedList&lt;&gt;();
        colorList.add("Red");
        colorList.add("Green");
        colorList.add("Blue");
         
        // Using for loop,print the contents of the LinkedList
        System.out.println("LinkedList elements using for loop:");
        for(int i=0; i &lt; colorList.size(); i++) {
            System.out.print(colorList.get(i) + " ");
        }
    }
}
public boolean list (String  color) {
    if (list < 1 || list > size())
			return false;
 
		Node color = head;
		if (list!= null) {
			for (int i = 0; i < list; i++) {
				if (color.getNext() == null)
					return false;
 
				color = color.getNext();
			}
			color.setNext(color.getNext().getNext());
 
			decrementCounter();
			return true;
 
		}
		return false;
	}
}
}
